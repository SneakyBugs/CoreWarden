// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package queries

import (
	"context"
)

const createRecord = `-- name: CreateRecord :one
INSERT INTO Records
(zone, content, name, is_wildcard, type, comment)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, zone, content, name, is_wildcard, type, created_at, modified_on, comment
`

type CreateRecordParams struct {
	Zone       string
	Content    string
	Name       string
	IsWildcard bool
	Type       int32
	Comment    string
}

func (q *Queries) CreateRecord(ctx context.Context, arg CreateRecordParams) (Record, error) {
	row := q.db.QueryRow(ctx, createRecord,
		arg.Zone,
		arg.Content,
		arg.Name,
		arg.IsWildcard,
		arg.Type,
		arg.Comment,
	)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.Zone,
		&i.Content,
		&i.Name,
		&i.IsWildcard,
		&i.Type,
		&i.CreatedAt,
		&i.ModifiedOn,
		&i.Comment,
	)
	return i, err
}

const readRecord = `-- name: ReadRecord :one
SELECT id, zone, content, name, is_wildcard, type, created_at, modified_on, comment FROM Records
WHERE id = $1
`

func (q *Queries) ReadRecord(ctx context.Context, id int32) (Record, error) {
	row := q.db.QueryRow(ctx, readRecord, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.Zone,
		&i.Content,
		&i.Name,
		&i.IsWildcard,
		&i.Type,
		&i.CreatedAt,
		&i.ModifiedOn,
		&i.Comment,
	)
	return i, err
}

const resolveRecord = `-- name: ResolveRecord :many
SELECT id, zone, content, name, is_wildcard, type, created_at, modified_on, comment FROM Records
WHERE name = $1 and type = $2 and is_wildcard = false
`

type ResolveRecordParams struct {
	Name string
	Type int32
}

func (q *Queries) ResolveRecord(ctx context.Context, arg ResolveRecordParams) ([]Record, error) {
	rows, err := q.db.Query(ctx, resolveRecord, arg.Name, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Zone,
			&i.Content,
			&i.Name,
			&i.IsWildcard,
			&i.Type,
			&i.CreatedAt,
			&i.ModifiedOn,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resolveWildcardRecord = `-- name: ResolveWildcardRecord :many
SELECT id, zone, content, name, is_wildcard, type, created_at, modified_on, comment FROM Records
WHERE name = ANY($2::text[]) and type = $1 and is_wildcard = true
`

type ResolveWildcardRecordParams struct {
	Type  int32
	Names []string
}

func (q *Queries) ResolveWildcardRecord(ctx context.Context, arg ResolveWildcardRecordParams) ([]Record, error) {
	rows, err := q.db.Query(ctx, resolveWildcardRecord, arg.Type, arg.Names)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.Zone,
			&i.Content,
			&i.Name,
			&i.IsWildcard,
			&i.Type,
			&i.CreatedAt,
			&i.ModifiedOn,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
