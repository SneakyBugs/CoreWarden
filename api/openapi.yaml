openapi: 3.1.0
info:
  title: DNS API
  description: |-
    API for programatically managing DNS records.
  version: 2.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://localhost:3080/v1
tags:
  - name: records
    description: Manage DNS records
paths:
  /records:
    get:
      summary: List records by zone
      description: List records by zone
      operationId: ListRecords
      tags:
        - records
      parameters:
        - name: zone
          in: query
          description: zone to list records in, must be FQDN
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Record"
        "400":
          description: Invalid zone parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: No permission to read zone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ServiceAccount: ["p, <sub>, records, <zone>, read"]
    post:
      summary: Create record
      description: Create a new record
      operationId: CreateRecord
      tags:
        - records
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecordParams"
      responses:
        "201":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Record"
        "400":
          description: Bad request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: No permission to read zone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ServiceAccount: ["p, <sub>, records, <zone>, read"]
  /records/{id}:
    get:
      summary: Find record by ID
      description: Find record by ID
      operationId: ReadRecord
      tags:
        - records
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Record"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ServiceAccount: ["p, <sub>, records, <zone>, read"]
    put:
      summary: Update record
      description: Update record by ID
      operationId: UpdateRecord
      tags:
        - records
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Record"
        "400":
          description: Bad request body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestError"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ServiceAccount: ["p, <sub>, records, <zone>, edit"]
    delete:
      summary: Delete record
      description: Delete record by ID
      operationId: DeleteRecord
      tags:
        - records
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Record"
        "401":
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Not found or forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - ServiceAccount: ["p, <sub>, records, <zone>, edit"]
components:
  schemas:
    Record:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        zone:
          type: string
          format: FQDN
          examples: ["example.com.", "example.net."]
        content:
          type: string
          format: RR
          examples: ["@ IN A 127.0.0.1"]
        comment:
          type: string
      required:
        - id
        - zone
        - content
    RecordParams:
      type: object
      properties:
        zone:
          type: string
          format: FQDN
          examples: ["example.com.", "example.net."]
        content:
          type: string
          format: RR
          examples: ["@ IN A 127.0.0.1"]
        comment:
          type: string
      required:
        - zone
        - content
    BadRequestError:
      type: object
      properties:
        message:
          type: string
          examples: ["bad request"]
        fields:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                examples: ["zone", "content"]
              message:
                type: string
                examples: ["required"]
            required:
              - key
              - message
        params:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
                examples: ["zone", "content"]
              message:
                type: string
                examples: ["required"]
            required:
              - key
              - message
      required:
        - message
    Error:
      type: object
      properties:
        message:
          type: string
          examples: ["unauthorized", "forbidden"]
  securitySchemes:
    ServiceAccount:
      type: http
      scheme: Basic
