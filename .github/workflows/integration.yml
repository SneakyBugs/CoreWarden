name: Go

on: [push]

jobs:
  go-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.60
          args: --timeout=30m

  protoc-diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install --yes protobuf-compiler
          go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
      - name: Validate protoc diff
        run: |
          cd proto
          protoc --go_out=../api/resolver --go_opt=paths=source_relative --go-grpc_out=../api/resolver --go-grpc_opt=paths=source_relative resolver.proto
          protoc --go_out=../coredns/plugin/injector/resolver --go_opt=paths=source_relative --go-grpc_out=../coredns/plugin/injector/resolver --go-grpc_opt=paths=source_relative resolver.proto
          test -z "$(git status --short)"

  sqlc-diff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Install Sqlc
        run: |
          wget -O /tmp/sqlc.tar.gz https://github.com/sqlc-dev/sqlc/releases/download/v1.24.0/sqlc_1.24.0_linux_amd64.tar.gz
          tar -xzf /tmp/sqlc.tar.gz
          mv sqlc /usr/local/bin
      - name: Validate Sqlc diff
        run: |
          cd api
          sqlc diff

  helm-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Lint Helm charts
        run: |
          go install golang.stackrox.io/kube-linter/cmd/kube-linter@v0.7.1
          cd charts
          helm lint --strict *
          kube-linter lint *

  test-unit:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16.3-alpine
        env:
          POSTGRES_DB: development
          POSTGRES_USER: development
          POSTGRES_PASSWORD: development
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Run unit tests
        env:
          POSTGRES_HOST: postgres
        run: go test ./...

  test-e2e:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --yes dnsutils
      - name: Build CoreDNS
        run: |
          cd coredns
          make coredns
      - name: Run e2e test
        run: |
          cd coredns/test
          ./test.sh

  image-api:
    runs-on: ubuntu-latest
    needs:
      - go-lint
      - protoc-diff
      - sqlc-diff
      - helm-lint
      - test-unit
      - test-e2e
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/sneakybugs/corewarden-api
      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  image-coredns:
    runs-on: ubuntu-latest
    needs:
      - go-lint
      - protoc-diff
      - sqlc-diff
      - helm-lint
      - test-unit
      - test-e2e
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/sneakybugs/corewarden-coredns
      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: coredns
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  image-externaldns-provider:
    runs-on: ubuntu-latest
    needs:
      - go-lint
      - protoc-diff
      - sqlc-diff
      - helm-lint
      - test-unit
      - test-e2e
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata for image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/sneakybugs/corewarden-externaldns-provider
      - name: Build and push image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: external-dns/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  image-charts:
    runs-on: ubuntu-latest
    needs:
      - image-api
      - image-coredns
      - image-externaldns-provider
    steps:
      - uses: actions/checkout@v4
      - name: Package charts
        run: |
          helm package charts/coredns
          helm package charts/api
      - name: Login to OCI registry
        run: helm registry login --username "${{ github.actor }}" --password "${{ github.token }}" ghcr.io
      - name: Push charts
        run: |
          helm push corewarden-api*.tgz oci://ghcr.io/sneakybugs
          helm push corewarden-coredns*.tgz oci://ghcr.io/sneakybugs

  docs:
    runs-on: ubuntu-latest
    needs:
      - go-lint
      - protoc-diff
      - sqlc-diff
      - helm-lint
      - test-unit
      - test-e2e
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Set GitHub Pages URL variable
        id: pages-url
        run: echo "url=https://${GITHUB_REPOSITORY_OWNER,,}.github.io${GITHUB_REPOSITORY/${GITHUB_REPOSITORY_OWNER/}}" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v4
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: '0.111.3'
      - run: |
          cd docs
          hugo --baseURL '${{ steps.pages-url.outputs.url }}'
      - uses: actions/upload-pages-artifact@v3
        with:
          path: docs/public
      - uses: actions/deploy-pages@v4
        id: deployment
