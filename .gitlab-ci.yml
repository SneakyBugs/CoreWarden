stages:
  - validate
  - deliver

lint:coredns:
  stage: validate
  image: golangci/golangci-lint:v1.55.2
  script:
    - cd coredns
    - golangci-lint run ./...

lint:api:
  stage: validate
  image: golangci/golangci-lint:v1.55.2
  script:
    - cd api
    - golangci-lint run --timeout=5m ./...

gen:sqlc:
  stage: validate
  image: golang:1.21.4-bookworm
  script:
    - wget -O /tmp/sqlc.tar.gz https://github.com/sqlc-dev/sqlc/releases/download/v1.24.0/sqlc_1.24.0_linux_amd64.tar.gz
    - tar -xzf /tmp/sqlc.tar.gz
    - mv sqlc /usr/local/bin
    - cd api
    - sqlc diff

gen:protoc:
  stage: validate
  image: golang:1.21.4-bookworm
  script:
    - apt-get update
    - apt-get install --yes protobuf-compiler
    - go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28
    - go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2
    - cd proto
    - protoc --go_out=../api/resolver --go_opt=paths=source_relative --go-grpc_out=../api/resolver --go-grpc_opt=paths=source_relative resolver.proto
    - test -z "$(git status --short)"

test:coredns:
  stage: validate
  image: golang:1.21.4-bookworm
  script:
    - cd coredns
    # Use gotestsum to generate a JUnit-like report.
    # Pass options (after --) to make go test generate a coverage report.
    - go run gotest.tools/gotestsum@latest --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: coredns/report.xml

test:api:
  stage: validate
  image: golang:1.21.4-bookworm
  variables:
    POSTGRES_DB: "development"
    POSTGRES_USER: "development"
    POSTGRES_PASSWORD: "development"
  services:
    - name: postgres:16.1-alpine
  script:
    - cd api
    # Use gotestsum to generate a JUnit-like report.
    # Pass options (after --) to make go test generate a coverage report.
    - go run gotest.tools/gotestsum@latest --junitfile report.xml --format testname
  artifacts:
    when: always
    reports:
      junit: api/report.xml

test:e2e:
  stage: validate
  image: golang:1.21.4-bookworm
  script:
    - apt-get update
    - apt-get install --yes dnsutils
    - cd coredns
    - make coredns
    - cd test
    - ./test.sh

lint:charts:
  stage: validate
  image: docker.houseofkummer.com/homelab/dockops:0.6.0
  script:
    - cd charts
    - helm lint --strict *
    - kube-linter lint *

publish:coredns:
  stage: deliver
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR/coredns --dockerfile $CI_PROJECT_DIR/coredns/Dockerfile --destination $CI_REGISTRY_IMAGE/coredns:$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG

publish:charts:
  stage: deliver
  image: docker.houseofkummer.com/homelab/dockops:0.6.0
  script:
    - helm package charts/coredns
    - curl --request POST --form "chart=@$(ls coredns*.tgz)" --user "${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/stable/charts"
  rules:
    - if: $CI_COMMIT_TAG
  needs:
    - publish:coredns
